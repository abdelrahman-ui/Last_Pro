
UART_SPI_Master_L_P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000019a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f0  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000691  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000431  00000000  00000000  0000125d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000270  00000000  00000000  00001aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 67 00 	call	0xce	; 0xce <main>
  7a:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uartInit>:
void SPI_Init(){
	//data direction for SPI bus Pins
	DDRB|=(1<<MOSI)|(1<<SCK);
	DDRC|=(1<<CS)|(1<<CS2);
	//MODE0-CPOL=0 CPHA=0 , SPE=1 , MSTR=1 DORD=MSB(0) , SPEED=FOSC/16=1Mhz
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPR0);
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	08 95       	ret

00000090 <uartSend>:
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <uartSend>
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <uart_sendString>:
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	fc 01       	movw	r30, r24
  a0:	80 81       	ld	r24, Z
  a2:	88 23       	and	r24, r24
  a4:	59 f0       	breq	.+22     	; 0xbc <uart_sendString+0x24>
  a6:	8f 01       	movw	r16, r30
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	0e 94 48 00 	call	0x90	; 0x90 <uartSend>
  ae:	cf 5f       	subi	r28, 0xFF	; 255
  b0:	f8 01       	movw	r30, r16
  b2:	ec 0f       	add	r30, r28
  b4:	f1 1d       	adc	r31, r1
  b6:	80 81       	ld	r24, Z
  b8:	81 11       	cpse	r24, r1
  ba:	f7 cf       	rjmp	.-18     	; 0xaa <uart_sendString+0x12>
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	08 95       	ret

000000c4 <SPI_Transfer>:
}
unsigned char SPI_Transfer(unsigned char sendByte){
	
	SPDR=sendByte;
  c4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <SPI_Transfer+0x2>
	return SPDR;
  ca:	8f b1       	in	r24, 0x0f	; 15
}
  cc:	08 95       	ret

000000ce <main>:
unsigned char SPI_Transfer(unsigned char sendByte);

int main(void)
{
	
	uartInit();
  ce:	0e 94 41 00 	call	0x82	; 0x82 <uartInit>
	while (1)
	{
		uart_sendString("ABDO_LAST_Pro\r\n");
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 4c 00 	call	0x98	; 0x98 <uart_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	83 ed       	ldi	r24, 0xD3	; 211
  de:	90 e3       	ldi	r25, 0x30	; 48
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x12>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x1c>
  ea:	00 00       	nop
		_delay_ms(1000);
		
			 SS_ENABLE();
  ec:	a8 98       	cbi	0x15, 0	; 21
			 unsigned char recvByte=SPI_Transfer(0x01);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_Transfer>
			 SS_DISABLE();																			//Momken 23mel enable w desable mra w7da 
  f4:	a8 9a       	sbi	0x15, 0	; 21
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	83 ed       	ldi	r24, 0xD3	; 211
  fa:	90 e3       	ldi	r25, 0x30	; 48
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x2e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x38>
 106:	00 00       	nop
			 			 _delay_ms(1000);
			SS_ENABLE();
 108:	a8 98       	cbi	0x15, 0	; 21
			 recvByte=SPI_Transfer(0x02);
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_Transfer>
			SS_DISABLE();
 110:	a8 9a       	sbi	0x15, 0	; 21
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	83 ed       	ldi	r24, 0xD3	; 211
 116:	90 e3       	ldi	r25, 0x30	; 48
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x4a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x54>
 122:	00 00       	nop
			_delay_ms(1000);
			SS_ENABLE();
 124:	a8 98       	cbi	0x15, 0	; 21
			 recvByte=SPI_Transfer(0x03);
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_Transfer>
			SS_DISABLE();
 12c:	a8 9a       	sbi	0x15, 0	; 21
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	83 ed       	ldi	r24, 0xD3	; 211
 132:	90 e3       	ldi	r25, 0x30	; 48
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x66>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x70>
 13e:	00 00       	nop
			_delay_ms(1000);
			SS_ENABLE();
 140:	a8 98       	cbi	0x15, 0	; 21
			 recvByte=SPI_Transfer(0x04);
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_Transfer>
			SS_DISABLE();
 148:	a8 9a       	sbi	0x15, 0	; 21
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	83 ed       	ldi	r24, 0xD3	; 211
 14e:	90 e3       	ldi	r25, 0x30	; 48
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x82>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x8c>
 15a:	00 00       	nop
			_delay_ms(1000);
			SS_ENABLE();
 15c:	a8 98       	cbi	0x15, 0	; 21
			 recvByte=SPI_Transfer(0x05);
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_Transfer>
			SS_DISABLE();
 164:	a8 9a       	sbi	0x15, 0	; 21
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	83 ed       	ldi	r24, 0xD3	; 211
 16a:	90 e3       	ldi	r25, 0x30	; 48
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x9e>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0xa8>
 176:	00 00       	nop
			_delay_ms(1000);
			SS2_ENABLE();
 178:	a9 98       	cbi	0x15, 1	; 21
			recvByte=SPI_Transfer(0x05);
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_Transfer>
			SS2_DISABLE();
 180:	a9 9a       	sbi	0x15, 1	; 21
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	83 ed       	ldi	r24, 0xD3	; 211
 186:	90 e3       	ldi	r25, 0x30	; 48
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0xba>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0xc4>
 192:	00 00       	nop
 194:	9e cf       	rjmp	.-196    	; 0xd2 <main+0x4>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
