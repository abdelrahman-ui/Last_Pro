
SPI_SLAVE2_SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000836  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000645  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  000010bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000370  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001df  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Transfer>:
}
void spi_slave_init()
{
	DDRB|=(1<<MISO);
	DDRB&=~(1<<SS); //input pin
	SPCR|=(1<<SPE);
  6c:	8f b9       	out	0x0f, r24	; 15
  6e:	77 9b       	sbis	0x0e, 7	; 14
  70:	fe cf       	rjmp	.-4      	; 0x6e <SPI_Transfer+0x2>
  72:	8f b1       	in	r24, 0x0f	; 15
  74:	08 95       	ret

00000076 <servo_init>:



void servo_init()
{
	TCCR1A=(1<<COM1A1)|(1<<COM1A0);																		//To set OC1A & OC1B
  76:	80 ec       	ldi	r24, 0xC0	; 192
  78:	8f bd       	out	0x2f, r24	; 47
	TCCR1A|=(1<<COM1B1);																			    //TOo be a non inverting mode in FPWM
  7a:	8f b5       	in	r24, 0x2f	; 47
  7c:	80 62       	ori	r24, 0x20	; 32
  7e:	8f bd       	out	0x2f, r24	; 47
	TCCR1A|=(1<<WGM11);																					// FROM TCCR1A TO HAVE  THE TOP  ON ICRA1
  80:	8f b5       	in	r24, 0x2f	; 47
  82:	82 60       	ori	r24, 0x02	; 2
  84:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(1<<WGM13)|(1<<WGM12);																		// FROM TCCR1B TO HAVE  THE TOP ON ICRA1
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8e bd       	out	0x2e, r24	; 46
	TCCR1B|=(1<<CS10)|(1<<CS11);																		// CHOISE THE PRESCALER
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8e bd       	out	0x2e, r24	; 46
	ICR1=4999;																							//CHOICE THE TOP TO HAVE THE NEEDED FREQUANCY ==50HZ
  90:	87 e8       	ldi	r24, 0x87	; 135
  92:	93 e1       	ldi	r25, 0x13	; 19
  94:	97 bd       	out	0x27, r25	; 39
  96:	86 bd       	out	0x26, r24	; 38
	DDRD|=(1<<PD4)|(1<<PD5);																			//THE DIRECTION OF OC1B &OC1A
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	80 63       	ori	r24, 0x30	; 48
  9c:	81 bb       	out	0x11, r24	; 17
  9e:	08 95       	ret

000000a0 <main>:


int main(void)
{
	void spi_slave_init();
	servo_init();
  a0:	0e 94 3b 00 	call	0x76	; 0x76 <servo_init>
	DDRD|=(1<<servo_pin);
  a4:	8f 9a       	sbi	0x11, 7	; 17

void Servo_angle(char angle )
{
	if (angle==0)
	{
		OCR1A= first_position ;
  a6:	0f 2e       	mov	r0, r31
  a8:	fa ef       	ldi	r31, 0xFA	; 250
  aa:	cf 2e       	mov	r12, r31
  ac:	d1 2c       	mov	r13, r1
  ae:	f0 2d       	mov	r31, r0
	}
	else
	{
		OCR1A=(angle*(250/180))+first_position;
  b0:	0f 2e       	mov	r0, r31
  b2:	f2 e2       	ldi	r31, 0x22	; 34
  b4:	ef 2e       	mov	r14, r31
  b6:	ff 24       	eor	r15, r15
  b8:	f3 94       	inc	r15
  ba:	f0 2d       	mov	r31, r0
  bc:	0e e5       	ldi	r16, 0x5E	; 94
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	c0 e9       	ldi	r28, 0x90	; 144
  c2:	d1 e0       	ldi	r29, 0x01	; 1
	void spi_slave_init();
	servo_init();
	DDRD|=(1<<servo_pin);
	while (1)
	{
		unsigned char recv=SPI_Transfer(0x55);
  c4:	85 e5       	ldi	r24, 0x55	; 85
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	39 e6       	ldi	r19, 0x69	; 105
  ce:	98 e1       	ldi	r25, 0x18	; 24
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x30>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x3a>
  da:	00 00       	nop
		_delay_ms(500);
		if(recv==0x05)
  dc:	85 30       	cpi	r24, 0x05	; 5
  de:	59 f4       	brne	.+22     	; 0xf6 <main+0x56>

void Servo_angle(char angle )
{
	if (angle==0)
	{
		OCR1A= first_position ;
  e0:	db bc       	out	0x2b, r13	; 43
  e2:	ca bc       	out	0x2a, r12	; 42
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	3b e7       	ldi	r19, 0x7B	; 123
  e8:	82 e9       	ldi	r24, 0x92	; 146
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x4a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x54>
  f4:	00 00       	nop
	}
	else
	{
		OCR1A=(angle*(250/180))+first_position;
  f6:	fb bc       	out	0x2b, r15	; 43
  f8:	ea bc       	out	0x2a, r14	; 42
  fa:	9f ef       	ldi	r25, 0xFF	; 255
  fc:	2b e7       	ldi	r18, 0x7B	; 123
  fe:	32 e9       	ldi	r19, 0x92	; 146
 100:	91 50       	subi	r25, 0x01	; 1
 102:	20 40       	sbci	r18, 0x00	; 0
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x60>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x6a>
 10a:	00 00       	nop
 10c:	1b bd       	out	0x2b, r17	; 43
 10e:	0a bd       	out	0x2a, r16	; 42
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	9b e7       	ldi	r25, 0x7B	; 123
 114:	22 e9       	ldi	r18, 0x92	; 146
 116:	81 50       	subi	r24, 0x01	; 1
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	20 40       	sbci	r18, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x76>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x80>
 120:	00 00       	nop
 122:	db bd       	out	0x2b, r29	; 43
 124:	ca bd       	out	0x2a, r28	; 42
 126:	3f ef       	ldi	r19, 0xFF	; 255
 128:	8b e7       	ldi	r24, 0x7B	; 123
 12a:	92 e9       	ldi	r25, 0x92	; 146
 12c:	31 50       	subi	r19, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x8c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x96>
 136:	00 00       	nop
 138:	c5 cf       	rjmp	.-118    	; 0xc4 <main+0x24>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
