
SPI_slave_L_P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000827  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  00000b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000379  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023a  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 77 00 	call	0xee	; 0xee <main>
  64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Transfer>:
#define DC_M1_EN  5
#define DC_M2_EN  4

unsigned char SPI_Transfer(unsigned char sendByte){
	
	SPDR =sendByte;
  6c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  6e:	77 9b       	sbis	0x0e, 7	; 14
  70:	fe cf       	rjmp	.-4      	; 0x6e <SPI_Transfer+0x2>
	return SPDR;
  72:	8f b1       	in	r24, 0x0f	; 15
}
  74:	08 95       	ret

00000076 <spi_slave_init>:
void spi_slave_init()
{
	DDRB|=(1<<MISO);
  76:	be 9a       	sbi	0x17, 6	; 23
	DDRB&=~(1<<SS); //input pin
  78:	bc 98       	cbi	0x17, 4	; 23
	SPCR|=(1<<SPE);
  7a:	6e 9a       	sbi	0x0d, 6	; 13
  7c:	08 95       	ret

0000007e <motors_init>:
}
void motors_init()
{

	//Direction OC1A is output
	DDRD|=(1<<DC_M1_EN);
  7e:	8d 9a       	sbi	0x11, 5	; 17
	//Direction OC1B is output
	DDRD|=(1<<DC_M2_EN);
  80:	8c 9a       	sbi	0x11, 4	; 17
	//PWM_fAST_8BIT
	TCCR1A|=(1<<WGM12)|(1<<WGM20);
  82:	8f b5       	in	r24, 0x2f	; 47
  84:	88 64       	ori	r24, 0x48	; 72
  86:	8f bd       	out	0x2f, r24	; 47
	//Inverted_Mode
	TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
  88:	8f b5       	in	r24, 0x2f	; 47
  8a:	80 6c       	ori	r24, 0xC0	; 192
  8c:	8f bd       	out	0x2f, r24	; 47
	//Pescalear = f_cpu=16 000 000 NO PRESCALER
	TCCR1B|=(1<<CS10);
  8e:	8e b5       	in	r24, 0x2e	; 46
  90:	81 60       	ori	r24, 0x01	; 1
  92:	8e bd       	out	0x2e, r24	; 46
  94:	08 95       	ret

00000096 <motor_1__speed>:
}
void motor_1__speed(unsigned char speed)
{
	//clok wise direction
	PORTC=(1<<DC_1_M1);
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	95 bb       	out	0x15, r25	; 21
	PORTC&=~(1<<DC_1_M2);
  9a:	a9 98       	cbi	0x15, 1	; 21
	// enable
	OCR1AL=(speed*255)/100;
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	82 9f       	mul	r24, r18
  a0:	c0 01       	movw	r24, r0
  a2:	11 24       	eor	r1, r1
  a4:	64 e6       	ldi	r22, 0x64	; 100
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
  ac:	6a bd       	out	0x2a, r22	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	91 ee       	ldi	r25, 0xE1	; 225
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	20 40       	sbci	r18, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <motor_1__speed+0x1e>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <motor_1__speed+0x28>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <motor_2__speed>:
	_delay_ms(100) ;
}
void motor_2__speed(unsigned char speed)
{
	//clok wise direction
	PORTC=(1<<DC_2_M1);
  c2:	90 e4       	ldi	r25, 0x40	; 64
  c4:	95 bb       	out	0x15, r25	; 21
	PORTC&=~(1<<DC_2_M2);
  c6:	af 98       	cbi	0x15, 7	; 21
	// enable
	OCR1AL=(speed*255)/100;
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	82 9f       	mul	r24, r18
  cc:	c0 01       	movw	r24, r0
  ce:	11 24       	eor	r1, r1
  d0:	64 e6       	ldi	r22, 0x64	; 100
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	0e 94 c4 00 	call	0x188	; 0x188 <__divmodhi4>
  d8:	6a bd       	out	0x2a, r22	; 42
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	91 ee       	ldi	r25, 0xE1	; 225
  de:	24 e0       	ldi	r18, 0x04	; 4
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	20 40       	sbci	r18, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <motor_2__speed+0x1e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <motor_2__speed+0x28>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <main>:
	_delay_ms(100) ;
}

int main(void)
{
	spi_slave_init();
  ee:	0e 94 3b 00 	call	0x76	; 0x76 <spi_slave_init>
	motors_init();
  f2:	0e 94 3f 00 	call	0x7e	; 0x7e <motors_init>
		if(recv==0x02){
			PORTC^=(1<<LED1);
			_delay_ms(1000);
		}
		if(recv==0x03){
			PORTC^=(1<<LED2);
  f6:	14 e0       	ldi	r17, 0x04	; 4
		if(recv==0x01){
			PORTC^=(1<<LED0);
			_delay_ms(1000);
		}
		if(recv==0x02){
			PORTC^=(1<<LED1);
  f8:	d2 e0       	ldi	r29, 0x02	; 2
	
	{
		unsigned char recv=SPI_Transfer(0x55);
		_delay_ms(1000);
		if(recv==0x01){
			PORTC^=(1<<LED0);
  fa:	c1 e0       	ldi	r28, 0x01	; 1
	motors_init();
	unsigned char move =200;
	while (1)
	
	{
		unsigned char recv=SPI_Transfer(0x55);
  fc:	85 e5       	ldi	r24, 0x55	; 85
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Transfer>
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	33 ed       	ldi	r19, 0xD3	; 211
 106:	90 e3       	ldi	r25, 0x30	; 48
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x1a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x24>
 112:	00 00       	nop
		_delay_ms(1000);
		if(recv==0x01){
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	69 f4       	brne	.+26     	; 0x132 <main+0x44>
			PORTC^=(1<<LED0);
 118:	95 b3       	in	r25, 0x15	; 21
 11a:	9c 27       	eor	r25, r28
 11c:	95 bb       	out	0x15, r25	; 21
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	33 ed       	ldi	r19, 0xD3	; 211
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	21 50       	subi	r18, 0x01	; 1
 126:	30 40       	sbci	r19, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x36>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x40>
 12e:	00 00       	nop
 130:	1e c0       	rjmp	.+60     	; 0x16e <main+0x80>
			_delay_ms(1000);
		}
		if(recv==0x02){
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	69 f4       	brne	.+26     	; 0x150 <main+0x62>
			PORTC^=(1<<LED1);
 136:	95 b3       	in	r25, 0x15	; 21
 138:	9d 27       	eor	r25, r29
 13a:	95 bb       	out	0x15, r25	; 21
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	33 ed       	ldi	r19, 0xD3	; 211
 140:	90 e3       	ldi	r25, 0x30	; 48
 142:	21 50       	subi	r18, 0x01	; 1
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x54>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x5e>
 14c:	00 00       	nop
 14e:	15 c0       	rjmp	.+42     	; 0x17a <main+0x8c>
			_delay_ms(1000);
		}
		if(recv==0x03){
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	69 f4       	brne	.+26     	; 0x16e <main+0x80>
			PORTC^=(1<<LED2);
 154:	85 b3       	in	r24, 0x15	; 21
 156:	81 27       	eor	r24, r17
 158:	85 bb       	out	0x15, r24	; 21
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	33 ed       	ldi	r19, 0xD3	; 211
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	21 50       	subi	r18, 0x01	; 1
 162:	30 40       	sbci	r19, 0x00	; 0
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x72>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x7c>
 16a:	00 00       	nop
 16c:	c7 cf       	rjmp	.-114    	; 0xfc <main+0xe>
			_delay_ms(1000);
		}
		if(recv==0x04){
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	21 f4       	brne	.+8      	; 0x17a <main+0x8c>
					motor_1__speed(move)	;		
 172:	88 ec       	ldi	r24, 0xC8	; 200
 174:	0e 94 4b 00 	call	0x96	; 0x96 <motor_1__speed>
 178:	c1 cf       	rjmp	.-126    	; 0xfc <main+0xe>
		}
		if(recv==0x05){
 17a:	85 30       	cpi	r24, 0x05	; 5
 17c:	09 f0       	breq	.+2      	; 0x180 <main+0x92>
 17e:	be cf       	rjmp	.-132    	; 0xfc <main+0xe>
			motor_2__speed(move)	;
 180:	88 ec       	ldi	r24, 0xC8	; 200
 182:	0e 94 61 00 	call	0xc2	; 0xc2 <motor_2__speed>
 186:	ba cf       	rjmp	.-140    	; 0xfc <main+0xe>

00000188 <__divmodhi4>:
 188:	97 fb       	bst	r25, 7
 18a:	07 2e       	mov	r0, r23
 18c:	16 f4       	brtc	.+4      	; 0x192 <__divmodhi4+0xa>
 18e:	00 94       	com	r0
 190:	07 d0       	rcall	.+14     	; 0x1a0 <__divmodhi4_neg1>
 192:	77 fd       	sbrc	r23, 7
 194:	09 d0       	rcall	.+18     	; 0x1a8 <__divmodhi4_neg2>
 196:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__udivmodhi4>
 19a:	07 fc       	sbrc	r0, 7
 19c:	05 d0       	rcall	.+10     	; 0x1a8 <__divmodhi4_neg2>
 19e:	3e f4       	brtc	.+14     	; 0x1ae <__divmodhi4_exit>

000001a0 <__divmodhi4_neg1>:
 1a0:	90 95       	com	r25
 1a2:	81 95       	neg	r24
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	08 95       	ret

000001a8 <__divmodhi4_neg2>:
 1a8:	70 95       	com	r23
 1aa:	61 95       	neg	r22
 1ac:	7f 4f       	sbci	r23, 0xFF	; 255

000001ae <__divmodhi4_exit>:
 1ae:	08 95       	ret

000001b0 <__udivmodhi4>:
 1b0:	aa 1b       	sub	r26, r26
 1b2:	bb 1b       	sub	r27, r27
 1b4:	51 e1       	ldi	r21, 0x11	; 17
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <__udivmodhi4_ep>

000001b8 <__udivmodhi4_loop>:
 1b8:	aa 1f       	adc	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	a6 17       	cp	r26, r22
 1be:	b7 07       	cpc	r27, r23
 1c0:	10 f0       	brcs	.+4      	; 0x1c6 <__udivmodhi4_ep>
 1c2:	a6 1b       	sub	r26, r22
 1c4:	b7 0b       	sbc	r27, r23

000001c6 <__udivmodhi4_ep>:
 1c6:	88 1f       	adc	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	5a 95       	dec	r21
 1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__udivmodhi4_loop>
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	bc 01       	movw	r22, r24
 1d4:	cd 01       	movw	r24, r26
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
